<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>AOP - Tag -</title><link>http://houugen.fun/tags/aop.html</link><description>AOP - Tag -</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 30 Mar 2021 09:00:00 +0000</lastBuildDate><atom:link href="http://houugen.fun/tags/aop.html" rel="self" type="application/rss+xml"/><item><title>NSProxy AOP</title><link>http://houugen.fun/posts/nsproxy-aop.html</link><pubDate>Tue, 30 Mar 2021 09:00:00 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/nsproxy-aop.html</guid><description>iOS AOP文章系列
前导知识：
Mach-O文件结构分析 静态链接&amp;amp;动态链接 OC方法&amp;amp;OC类&amp;amp;OC对象 方法查找和消息转发 AOP框架：
Method Swizzling Fishhook Apsects NSProxy AOP 介绍 iOS 有一个原生的 AOP 方法，就是利用 NSProxy 代理类！，我们先看下官网介绍：
Typically, a message to a proxy is forwarded to the real object or causes the proxy to load (or transform itself into) the real object. Subclasses of NSProxy can be used to implement transparent distributed messaging (for example, NSDistantObject) or for lazy instantiation of objects that are expensive to create.</description></item><item><title>Apsects</title><link>http://houugen.fun/posts/apsects.html</link><pubDate>Mon, 29 Mar 2021 21:00:00 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/apsects.html</guid><description>iOS AOP文章系列
前导知识：
Mach-O文件结构分析 静态链接&amp;amp;动态链接 OC方法&amp;amp;OC类&amp;amp;OC对象 方法查找和消息转发 AOP框架：
Method Swizzling Fishhook Apsects NSProxy AOP 介绍 Think of Aspects as method swizzling on steroids. It allows you to add code to existing methods per class or per instance, whilst thinking of the insertion point e.g. before/instead/after. Aspects automatically deals with calling super and is easier to use than regular method swizzling.
从 Apsects 的介绍可以看到利用 swizzling 技术来达到为类方法或实例方法添加额外逻辑。且有 before / instead / after 三种场景。</description></item><item><title>Fishhook</title><link>http://houugen.fun/posts/fishhook.html</link><pubDate>Thu, 25 Mar 2021 21:00:00 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/fishhook.html</guid><description><![CDATA[iOS AOP文章系列
前导知识：
 Mach-O文件结构分析 静态链接&amp;动态链接 OC方法&amp;OC类&amp;OC对象 方法查找和消息转发  AOP框架：
 Method Swizzling Fishhook Apsects NSProxy AOP   fishhook 是 facebook 开源的一款简单易用的动态 hook 框架。一起学习下其原理。
还是那个🌰 在 OC方法&amp;OC类&amp;OC对象 中讲元类的时候分配注册了一个 Student 类，并实现了 study 方法，but 学生表面学习，内心还是向往诗和远方，因此我们想通过 Fishhook 动态 Hook NSLog 系统函数来表达学生党的真实内心：
// main.m void StudyFunction(id self, SEL _cmd) { NSLog(@&#34;i am studing&#34;); } // 定义函数指针用来保存原始函数 static void (*orig_nslog)(NSString * format,...); // 定义新函数扩展 NSLog void newNSLog(NSString * format,...) { format = [format stringByAppendingFormat:@&#34;\tOS: i want to play!]]></description></item><item><title>Method Swizzling</title><link>http://houugen.fun/posts/method-swizzling.html</link><pubDate>Sat, 20 Mar 2021 21:00:00 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/method-swizzling.html</guid><description><![CDATA[iOS AOP文章系列
前导知识：
 Mach-O文件结构分析 静态链接&amp;动态链接 OC方法&amp;OC类&amp;OC对象 方法查找和消息转发  AOP框架：
 Method Swizzling Fishhook Apsects NSProxy AOP   iOS AOP 接下来的文章我们正式进入 iOS AOP 的世界。
AOP 是一种面向切面编程，核心思想是在不修改源码情况下给程序添加功能的技术。
根据 OC 的 runtime 特性，我们先来介绍比较基础的一种实现方式 &ndash; Method Swizzling。
🌰 演示 我们依旧使用 前导知识文章 中的 Demo，先为 Person 添加一个 Category 类来扩展一个 eat 方法，毕竟干饭人除了睡还要吃，要不和咸鱼有什么区别，我们想在 人 睡前先 吃饱饭，该如何利用 Swizzling 实现呢？
// Person.m @implementation Person - (void)sleep { NSLog(@&#34;i am sleeping&#34;); } @end // Person+swizzle.m @implementation Person (swizzle) - (void)eat { NSLog(@&#34;i am eating&#34;); // 这里调用自身并不会导致递归调用  // 因为在 main 中交换了 eat 和 sleep 的 IMP，所以这里实际上调用的是 sleep  [self eat]; } @end // main.]]></description></item><item><title>方法查找和消息转发</title><link>http://houugen.fun/posts/%E6%96%B9%E6%B3%95%E6%9F%A5%E6%89%BE%E5%92%8C%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91.html</link><pubDate>Mon, 15 Mar 2021 21:00:00 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/%E6%96%B9%E6%B3%95%E6%9F%A5%E6%89%BE%E5%92%8C%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91.html</guid><description>iOS AOP文章系列
前导知识：
Mach-O文件结构分析 静态链接&amp;amp;动态链接 OC方法&amp;amp;OC类&amp;amp;OC对象 方法查找和消息转发 AOP框架：
Method Swizzling Fishhook Apsects NSProxy AOP Tip 源码分析环境：objc4-818.2 根据之前的文章我们知道OC方法的本质就是调用 obj_msgSend，那么我们具体分析下 ObjC 下方法的查找和转发机制。
obj_msgSend 的实现在 obj-msg-rm64.s 中的汇编代码为：
ENTRY _objc_msgSend UNWIND _objc_msgSend, NoFrame cmp p0, #0 // nil check and tagged pointer check #if SUPPORT_TAGGED_POINTERS b.le LNilOrTagged // (MSB tagged pointer looks negative) #else b.eq LReturnZero #endif ldr p13, [x0] // p13 = isa GetClassFromIsa_p16 p13, 1, x0 // p16 = class LGetIsaDone: // calls imp or objc_msgSend_uncached CacheLookup NORMAL, _objc_msgSend, __objc_msgSend_uncached #if SUPPORT_TAGGED_POINTERS LNilOrTagged: b.</description></item><item><title>OC方法&amp;OC类&amp;OC对象</title><link>http://houugen.fun/posts/oc%E6%96%B9%E6%B3%95oc%E7%B1%BBoc%E5%AF%B9%E8%B1%A1.html</link><pubDate>Wed, 10 Mar 2021 21:00:00 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/oc%E6%96%B9%E6%B3%95oc%E7%B1%BBoc%E5%AF%B9%E8%B1%A1.html</guid><description><![CDATA[iOS AOP文章系列
前导知识：
 Mach-O文件结构分析 静态链接&amp;动态链接 OC方法&amp;OC类&amp;OC对象 方法查找和消息转发  AOP框架：
 Method Swizzling Fishhook Apsects NSProxy AOP   Tip  源码分析环境：objc4-818.2   OC方法 通过之前的文章 Mach-O文件结构分析 我们得知OC方法在编译时调用了 objc_msgSend 函数
int main(int argc, const char * argv[]) { @autoreleasepool { // insert code here...  NSLog(@&#34;Hello, World!&#34;); Person *p = [[Person alloc] init]; [p walk]; [p ill]; [p sleep]; run(); } return 0; } clang -rewrite-objc main.m -o main.cpp]]></description></item><item><title>静态链接&amp;动态链接</title><link>http://houugen.fun/posts/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5.html</link><pubDate>Fri, 05 Mar 2021 21:00:00 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5.html</guid><description>iOS AOP文章系列
前导知识：
Mach-O文件结构分析 静态链接&amp;amp;动态链接 OC方法&amp;amp;OC类&amp;amp;OC对象 方法查找和消息转发 AOP框架：
Method Swizzling Fishhook Apsects NSProxy AOP 静态链接 还是通过 🌰 来分析：
➜ ios cat bar.c int global = 1; void fizz(int a) { global = a; } ➜ ios cat main.c extern int global; void fizz(int a); int main() { fizz(100 + global); return 0; } 编译链接 bar.c 和 main.c 生成可执行文件 main
➜ ios xcrun -sdk iphoneos clang -c bar.</description></item><item><title>Mach-O 文件结构分析</title><link>http://houugen.fun/posts/mach-o%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90.html</link><pubDate>Mon, 01 Mar 2021 21:00:00 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/mach-o%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90.html</guid><description>iOS AOP文章系列
前导知识：
Mach-O文件结构分析 静态链接&amp;amp;动态链接 OC方法&amp;amp;OC类&amp;amp;OC对象 方法查找和消息转发 AOP框架：
Method Swizzling Fishhook Apsects NSProxy AOP 二进制结构 使用 MachoView 工具查看二进制执行文件，结构为：
Header 头中魔术数字：
可执行格式 magic 用途 脚本 \x7FELF 主要用于 shell 脚本，但是也常用语其他解释器，如 Perl, AWK 等。也就是我们常见的脚本文件中在 #! 标记后的字符串，即为执行命令的指令方式，以文件的 stdin 来传递命令 通用二进制格式 0xcafebabe 0xbebafeca 包含多种架构支持的二进制格式，只在 macOS 上支持 Mach-O 0xfeedface（32 位） 0xfeedfacf（64 位） macOS 的原生二进制格式 Mach-O 主要三部分：</description></item></channel></rss>