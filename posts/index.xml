<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts -</title><link>http://houugen.fun/posts.html</link><description>All Posts |</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 29 Mar 2021 21:00:00 +0000</lastBuildDate><atom:link href="http://houugen.fun/posts.html" rel="self" type="application/rss+xml"/><item><title>Apsects</title><link>http://houugen.fun/posts/apsects.html</link><pubDate>Mon, 29 Mar 2021 21:00:00 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/apsects.html</guid><description>iOS AOP文章系列
前导知识：
Mach-O文件结构分析 静态链接&amp;amp;动态链接 OC方法&amp;amp;OC类&amp;amp;OC对象 方法查找和消息转发 AOP框架：
Method Swizzling Fishhook Apsects NSProxy AOP 介绍 Think of Aspects as method swizzling on steroids. It allows you to add code to existing methods per class or per instance, whilst thinking of the insertion point e.g. before/instead/after. Aspects automatically deals with calling super and is easier to use than regular method swizzling.
从 Apsects 的介绍可以看到利用 swizzling 技术来达到为类方法或实例方法添加额外逻辑。且有 before / instead / after 三种场景。</description></item><item><title>Fishhook</title><link>http://houugen.fun/posts/fishhook.html</link><pubDate>Thu, 25 Mar 2021 21:00:00 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/fishhook.html</guid><description><![CDATA[iOS AOP文章系列
前导知识：
 Mach-O文件结构分析 静态链接&amp;动态链接 OC方法&amp;OC类&amp;OC对象 方法查找和消息转发  AOP框架：
 Method Swizzling Fishhook Apsects NSProxy AOP   fishhook 是 facebook 开源的一款简单易用的动态 hook 框架。一起学习下其原理。
还是那个🌰 在 OC方法&amp;OC类&amp;OC对象 中讲元类的时候分配注册了一个 Student 类，并实现了 study 方法，but 学生表面学习，内心还是向往诗和远方，因此我们想通过 Fishhook 动态 Hook NSLog 系统函数来表达学生党的真实内心：
// main.m void StudyFunction(id self, SEL _cmd) { NSLog(@&#34;i am studing&#34;); } // 定义函数指针用来保存原始函数 static void (*orig_nslog)(NSString * format,...); // 定义新函数扩展 NSLog void newNSLog(NSString * format,...) { format = [format stringByAppendingFormat:@&#34;\tOS: i want to play!]]></description></item><item><title>Method Swizzling</title><link>http://houugen.fun/posts/method-swizzling.html</link><pubDate>Sat, 20 Mar 2021 21:00:00 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/method-swizzling.html</guid><description><![CDATA[iOS AOP文章系列
前导知识：
 Mach-O文件结构分析 静态链接&amp;动态链接 OC方法&amp;OC类&amp;OC对象 方法查找和消息转发  AOP框架：
 Method Swizzling Fishhook Apsects NSProxy AOP   iOS AOP 接下来的文章我们正式进入 iOS AOP 的世界。
AOP 是一种面向切面编程，核心思想是在不修改源码情况下给程序添加功能的技术。
根据 OC 的 runtime 特性，我们先来介绍比较基础的一种实现方式 &ndash; Method Swizzling。
🌰 演示 我们依旧使用 前导知识文章 中的 Demo，先为 Person 添加一个 Category 类来扩展一个 eat 方法，毕竟干饭人除了睡还要吃，要不和咸鱼有什么区别，我们想在 人 睡前先 吃饱饭，该如何利用 Swizzling 实现呢？
// Person.m @implementation Person - (void)sleep { NSLog(@&#34;i am sleeping&#34;); } @end // Person+swizzle.m @implementation Person (swizzle) - (void)eat { NSLog(@&#34;i am eating&#34;); // 这里调用自身并不会导致递归调用  // 因为在 main 中交换了 eat 和 sleep 的 IMP，所以这里实际上调用的是 sleep  [self eat]; } @end // main.]]></description></item><item><title>方法查找和消息转发</title><link>http://houugen.fun/posts/%E6%96%B9%E6%B3%95%E6%9F%A5%E6%89%BE%E5%92%8C%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91.html</link><pubDate>Mon, 15 Mar 2021 21:00:00 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/%E6%96%B9%E6%B3%95%E6%9F%A5%E6%89%BE%E5%92%8C%E6%B6%88%E6%81%AF%E8%BD%AC%E5%8F%91.html</guid><description>iOS AOP文章系列
前导知识：
Mach-O文件结构分析 静态链接&amp;amp;动态链接 OC方法&amp;amp;OC类&amp;amp;OC对象 方法查找和消息转发 AOP框架：
Method Swizzling Fishhook Apsects NSProxy AOP Tip 源码分析环境：objc4-818.2 根据之前的文章我们知道OC方法的本质就是调用 obj_msgSend，那么我们具体分析下 ObjC 下方法的查找和转发机制。
obj_msgSend 的实现在 obj-msg-rm64.s 中的汇编代码为：
ENTRY _objc_msgSend UNWIND _objc_msgSend, NoFrame cmp p0, #0 // nil check and tagged pointer check #if SUPPORT_TAGGED_POINTERS b.le LNilOrTagged // (MSB tagged pointer looks negative) #else b.eq LReturnZero #endif ldr p13, [x0] // p13 = isa GetClassFromIsa_p16 p13, 1, x0 // p16 = class LGetIsaDone: // calls imp or objc_msgSend_uncached CacheLookup NORMAL, _objc_msgSend, __objc_msgSend_uncached #if SUPPORT_TAGGED_POINTERS LNilOrTagged: b.</description></item><item><title>OC方法&amp;OC类&amp;OC对象</title><link>http://houugen.fun/posts/oc%E6%96%B9%E6%B3%95oc%E7%B1%BBoc%E5%AF%B9%E8%B1%A1.html</link><pubDate>Wed, 10 Mar 2021 21:00:00 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/oc%E6%96%B9%E6%B3%95oc%E7%B1%BBoc%E5%AF%B9%E8%B1%A1.html</guid><description><![CDATA[iOS AOP文章系列
前导知识：
 Mach-O文件结构分析 静态链接&amp;动态链接 OC方法&amp;OC类&amp;OC对象 方法查找和消息转发  AOP框架：
 Method Swizzling Fishhook Apsects NSProxy AOP   Tip  源码分析环境：objc4-818.2   OC方法 通过之前的文章 Mach-O文件结构分析 我们得知OC方法在编译时调用了 objc_msgSend 函数
int main(int argc, const char * argv[]) { @autoreleasepool { // insert code here...  NSLog(@&#34;Hello, World!&#34;); Person *p = [[Person alloc] init]; [p walk]; [p ill]; [p sleep]; run(); } return 0; } clang -rewrite-objc main.m -o main.cpp]]></description></item><item><title>静态链接&amp;动态链接</title><link>http://houugen.fun/posts/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5.html</link><pubDate>Fri, 05 Mar 2021 21:00:00 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5.html</guid><description>iOS AOP文章系列
前导知识：
Mach-O文件结构分析 静态链接&amp;amp;动态链接 OC方法&amp;amp;OC类&amp;amp;OC对象 方法查找和消息转发 AOP框架：
Method Swizzling Fishhook Apsects NSProxy AOP 静态链接 还是通过 🌰 来分析：
➜ ios cat bar.c int global = 1; void fizz(int a) { global = a; } ➜ ios cat main.c extern int global; void fizz(int a); int main() { fizz(100 + global); return 0; } 编译链接 bar.c 和 main.c 生成可执行文件 main
➜ ios xcrun -sdk iphoneos clang -c bar.</description></item><item><title>Mach-O 文件结构分析</title><link>http://houugen.fun/posts/mach-o%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90.html</link><pubDate>Mon, 01 Mar 2021 21:00:00 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/mach-o%E6%96%87%E4%BB%B6%E7%BB%93%E6%9E%84%E5%88%86%E6%9E%90.html</guid><description>iOS AOP文章系列
前导知识：
Mach-O文件结构分析 静态链接&amp;amp;动态链接 OC方法&amp;amp;OC类&amp;amp;OC对象 方法查找和消息转发 AOP框架：
Method Swizzling Fishhook Apsects NSProxy AOP 二进制结构 使用 MachoView 工具查看二进制执行文件，结构为：
Header 头中魔术数字：
可执行格式 magic 用途 脚本 \x7FELF 主要用于 shell 脚本，但是也常用语其他解释器，如 Perl, AWK 等。也就是我们常见的脚本文件中在 #! 标记后的字符串，即为执行命令的指令方式，以文件的 stdin 来传递命令 通用二进制格式 0xcafebabe 0xbebafeca 包含多种架构支持的二进制格式，只在 macOS 上支持 Mach-O 0xfeedface（32 位） 0xfeedfacf（64 位） macOS 的原生二进制格式 Mach-O 主要三部分：</description></item><item><title>Blog From Hexo To Hugo</title><link>http://houugen.fun/posts/blog%E8%BF%81%E7%A7%BB.html</link><pubDate>Mon, 13 Jul 2020 17:44:54 +0800</pubDate><author>Author</author><guid>http://houugen.fun/posts/blog%E8%BF%81%E7%A7%BB.html</guid><description><![CDATA[最近逛Gayhub看到Hugo，不管框架怎么样，先进官网看主题，颜狗瞬间被皮肤所吸引，回头默默看了下自己的博客，不就是荣耀水晶皮肤和没皮肤的区别么！再浏览文档和上手体验后，竟然还体会到了+10点攻击力的感受，安装、配置、部署、主题、MD即显、Actions配套等处处体现Hugo的简洁、灵活和高效！
随即开始了迁徙之路（主要是想换个皮提高下写Blog的动力）&hellip;
安装 参照官档：
https://gohugo.io/documentation/
同时Hugo Demo站也提供了详尽文档：
https://hugoloveit.com
主题 个人喜欢黑白极简：
https://themes.gohugo.io/loveit/
配置 着重说下三个小坑：
  搜索功能
未使用开箱即用的lunr（听说对中文不友好），直接用algolia，除了根据Hugo文档配置config.toml对应部分外，为了后续实现Github Actions自动化部署，而使用atomic-algolia，额外需要通过npm init生成package.json后，在其中添加：
... &#34;scripts&#34;: { &#34;test&#34;: &#34;echo \&#34;Error: no test specified\&#34; &amp;&amp; exit 1&#34;, &#34;algolia&#34;: &#34;atomic-algolia&#34; }, ... ``
Actions中workflow配置：
- name:Setup Nodeuses:actions/setup-node@v2.1.0with:node-version:&#39;12.x&#39;# ... #- name:Setup Algoliaenv:ALGOLIA_APP_ID:63ROI1DYLOALGOLIA_ADMIN_KEY:${{ secrets.ALGOLIA_ADMIN_KEY }}ALGOLIA_INDEX_NAME:houugen_blogALGOLIA_INDEX_FILE:public/index.jsonrun:npm install atomic-algolia &amp;&amp; npm run algolia  Note  ALGOLIA_ADMIN_KEY为Algolia API Keys中的Admin API Key，将其值添加到Github的Secrets中    文档图片
之前使用Hexo时文章和图片文件夹并行在posts中
➜ houugen.github.io git:(hugo) ✗ tree posts posts/ ├── Blockchain-Security-Articles.]]></description></item><item><title>深度学习识别汉字点选验证码</title><link>http://houugen.fun/posts/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%86%E5%88%AB%E6%B1%89%E5%AD%97%E7%82%B9%E9%80%89%E9%AA%8C%E8%AF%81%E7%A0%81.html</link><pubDate>Fri, 04 Jan 2019 17:26:00 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%AF%86%E5%88%AB%E6%B1%89%E5%AD%97%E7%82%B9%E9%80%89%E9%AA%8C%E8%AF%81%E7%A0%81.html</guid><description>背景 国家企业信用信息公示系统查询时使用极验验证码，大概率为第三代汉字语序点选识别。
查询资料发现可使用深度学习进行汉字定位及分类。
参考资料：
https://runninggump.github.io/2018/11/19/破解含语序问题的点击验证码 https://cos120.github.io/crack/ https://www.cnblogs.com/codefish/p/10104320.html http://www.aneasystone.com/archives/2018/03/python-selenium-geetest-crack.html 实践后效果：
使用的框架、算法及工具：
定位&amp;amp;分类 样本标注：labelImg、若快 训练框架：darknet yolov3 语序识别 百度ocr 结巴分词 百度搜索词频统计 模拟 selenium 滑动轨迹：利用jquery.easing模拟人工轨迹 踩坑 汉字定位和分类学习详尽的实践步骤参考资料中都有说明，这里不再叙述。这里记录下实践过程中踩的坑及一些特殊处理。
darknet环境 坑1：不要使用cpu训练 windows/linux推荐使用 AlexeyAB/darknet，专门定制。 VS2017 + VC++2015 v140工具集 CUDA9.0 （坑2： 10.0 在win10 nvidia gtx 1080 ti上报 cuda error:no error，==！答案搜都搜不到，耽搁许久尝试降级才成功） OpenCV 3.4.0 cuDNN7.1 分类样本 坑3：使用手工标注汉字分类样本500张1h后发现刚不住，可使用打码平台，多进程8w张3h搞定。
坑4：分离1.3k汉字训练后验证100张发现准确率同样为85%！无需更多样本分离更多汉字。
坑5：人工打码准确率不能奢望，又花费1h对词频小于10的茫茫多汉字进行修正（脚本在仓库）。</description></item><item><title>Blockchain Security Articles</title><link>http://houugen.fun/posts/blockchain-security-articles.html</link><pubDate>Thu, 03 Jan 2019 23:30:38 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/blockchain-security-articles.html</guid><description>环境:
spider(docker) : scrapy + postgresql
auto(vps) : script(python2markdown &amp;amp; bash2workflow) + travis2hexo
New Articles 2019-01-03 区块链安全—整数溢出原理分析 EOS竞猜游戏ggeos昨晚遭交易回滚攻击 Old Articles 2018-12-29 PeckShield: EOS竞猜游戏LuckBet今晨遭交易回滚攻击 2018-12-28 EOS 回滚攻击手法分析之重放篇 攻击BetDice的黑客团伙再现，竞猜游戏LuckyMe正遭攻击 PeckShield：EOS竞猜游戏GameBet遭受交易回滚攻击 针对Electrum钱包的钓鱼攻击，损失已高达100万美元 以太坊Fountain代币遭溢出攻击 2018-12-26 区块链安全—随机数安全分析（上） EOS 回滚攻击手法分析之黑名单篇 PeckShield：EOS竞猜游戏Lucky Nuts因随机数安全问题暂停 区块链安全—随机数安全分析（下） 2018-12-25 Bitcoin Private（BTCP） 的案例研究 2018-12-24 PeckShield安全播报: EOS竞猜游戏EosDice遭受交易回滚攻击 PeckShield安全播报：EOS竞猜游戏Pickown遭“假转账通知”攻击 PeckShield 安全播报: EOS竞猜游戏LuckBet遭随机数攻击 2018-12-20 EOS DApp 攻击重现之利用黑名单账号进行欺骗攻击 区块链安全—简单函数的危险漏洞分析（一） 2018-12-19 BetDice遭黑客攻击，损失近20万EOS ToBet遭到黑客恶意攻击 Big.</description></item></channel></rss>