<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>区块链 - Category -</title><link>http://houugen.fun/categories/%E5%8C%BA%E5%9D%97%E9%93%BE.html</link><description>区块链 - Category -</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 03 Jan 2019 23:30:38 +0000</lastBuildDate><atom:link href="http://houugen.fun/categories/%E5%8C%BA%E5%9D%97%E9%93%BE.html" rel="self" type="application/rss+xml"/><item><title>Blockchain Security Articles</title><link>http://houugen.fun/posts/blockchain-security-articles.html</link><pubDate>Thu, 03 Jan 2019 23:30:38 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/blockchain-security-articles.html</guid><description>环境:
spider(docker) : scrapy + postgresql
auto(vps) : script(python2markdown &amp;amp; bash2workflow) + travis2hexo
New Articles 2019-01-03 区块链安全—整数溢出原理分析 EOS竞猜游戏ggeos昨晚遭交易回滚攻击 Old Articles 2018-12-29 PeckShield: EOS竞猜游戏LuckBet今晨遭交易回滚攻击 2018-12-28 EOS 回滚攻击手法分析之重放篇 攻击BetDice的黑客团伙再现，竞猜游戏LuckyMe正遭攻击 PeckShield：EOS竞猜游戏GameBet遭受交易回滚攻击 针对Electrum钱包的钓鱼攻击，损失已高达100万美元 以太坊Fountain代币遭溢出攻击 2018-12-26 区块链安全—随机数安全分析（上） EOS 回滚攻击手法分析之黑名单篇 PeckShield：EOS竞猜游戏Lucky Nuts因随机数安全问题暂停 区块链安全—随机数安全分析（下） 2018-12-25 Bitcoin Private（BTCP） 的案例研究 2018-12-24 PeckShield安全播报: EOS竞猜游戏EosDice遭受交易回滚攻击 PeckShield安全播报：EOS竞猜游戏Pickown遭“假转账通知”攻击 PeckShield 安全播报: EOS竞猜游戏LuckBet遭随机数攻击 2018-12-20 EOS DApp 攻击重现之利用黑名单账号进行欺骗攻击 区块链安全—简单函数的危险漏洞分析（一） 2018-12-19 BetDice遭黑客攻击，损失近20万EOS ToBet遭到黑客恶意攻击 Big.</description></item><item><title>Blockchain WordCloud</title><link>http://houugen.fun/posts/blockchain-wordcloud.html</link><pubDate>Thu, 23 Aug 2018 15:05:02 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/blockchain-wordcloud.html</guid><description>区块链安全云词
爬虫：scrapy
数据库：postgresql
分词：jieba
词频：py脚本（注意数据清洗)
云词：wordart
字体：Aa荷包鼓鼓</description></item><item><title>#DASP# Short Addresses (9)</title><link>http://houugen.fun/posts/dasp-short-addresses-9.html</link><pubDate>Mon, 20 Aug 2018 15:40:14 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/dasp-short-addresses-9.html</guid><description>0x00 Info 短地址攻击是DASP TOP10中详细描述的最后一类漏洞。这个漏洞其实可以归结于过去EVM的缺陷。
0x01 基础知识 Quote The Contract Application Binary Interface (ABI) is the standard way to interact with contracts in the Ethereum ecosystem, both from outside the blockchain and for contract-to-contract interaction. 在EVM虚拟机中合约是通过ABI接口进行交互，数据和方法都根据特定标准进行编解码。具体参见Contract ABI Specification。
如何通过ABI调用合约方法？方法和数据如何编码？我们举例（经典Token合约）来说明：
contract MyToken { mapping (address =&amp;gt; uint) balances; event Transfer(address indexed _from, address indexed _to, uint256 _value); function MyToken() { balances[tx.origin] = 10000; } function sendCoin(address to, uint amount) returns(bool sufficient) { if (balances[msg.</description></item><item><title>#DASP# Time Manipulation (8)</title><link>http://houugen.fun/posts/dasp-time-manipulation-8.html</link><pubDate>Sun, 19 Aug 2018 16:13:53 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/dasp-time-manipulation-8.html</guid><description>0x00 Info 如果攻击者拥有矿工角色，在交易打包成块时，矿工在一定范围是可以操作块的时间戳的，而恰恰合约利用时间戳生成逻辑（特别是涉及到资金交易）就会存在Time manipulation风险。
0x01 Rules 一个合约需要用到“当前时间”，通常是通过block.timestamp或者now来实现，而这个值来源于矿工！矿工是可以在几秒内调整这个时间戳的，从而为自己的利益改变合同的输出。
例如一个合约使用时间戳来生成随机数（在example中有实例），矿工可以在区块被验证后30s内发布时间戳，从而利用这30s的时间增加自己获利概率。
30-second Rule
矿工可以改变区块的时间戳
仅限于被验证后的30s 当前块的时间戳不能小于前一块的时间戳 但是一个合约具备以下特性，是可以安全使用时间戳的： Quote If the smart contract function can tolerate a 30-second time period, it’s safe to use timestamp; If the scale of a time-dependent event can vary by 30 seconds and maintain integrity, it’s also safe to use a block timestamp.
0x02 Examples 前两个实例合约主要利用block.timestamp来生成随机数，而在#DASP# Bad Randomness一文中我们详细介绍了这种随机数生成的缺陷。
theRun Source Code</description></item><item><title>#DASP# Front Running (7)</title><link>http://houugen.fun/posts/dasp-front-running-7.html</link><pubDate>Thu, 16 Aug 2018 14:58:48 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/dasp-front-running-7.html</guid><description><![CDATA[0x00 Info 本篇介绍DASP第七种漏洞类型&ndash;前置执行。 可以理解为因为区块链是公开，其他用户或者合约的交易信息均透明可查，恶意用户可以利用这些已知信息制造有利于自己的交易，并通过提高手续费的方式抢先执行获利。
当然，在front-running-griefing-and-the-perils-of-virtual-settlement中描述，如果这个恶意用户本身又是矿工，可以任意安排交易并审查其他人交易，使自己利益最大化。
0x01 实例 LastIsMe Contract Source Code
LastIsMe是一个lottery游戏合约，在一个游戏回合（一定的区块数内）参与者购买一张票认领最后一个座位，回合结束时最后一个就坐的玩家会获得头奖。
攻击者可以在回合快结束时观察其他玩家的交易池，通过提高gas来挤掉其他玩家的交易从而获得奖金。
ICO Contract Source Code
ICO本身是一道CTF题，它包含一个DAPP网站和与其交互的两个合约（HaCoin &amp; ICO），部署在rinkeby测试链上。
HaCoin是一个Token合约，比赛的目标也是从该合约中获取超过31337枚HackCoin，而这个合约本身并没有问题，需要配合Web网站存在的XSS漏洞来提权，才能进行转币操作。很有意思，具体writeup参见ZeroNights ICO Hacking Contest Writeup。
而另一个合约ICO是一个lottery合约，游戏规则也很简单，5个块为一回合，回合内参与者猜一个数字，回合结束时机器人会随机抛出一个数字，如果谁猜中谁就获胜。而该合约存在前置执行漏洞。
function spinLottery(uint number) public { if (msg.sender != robotAddress) { playerNumber[msg.sender] = number; players.push(msg.sender); NewLotteryBet(msg.sender); } else { require(block.number - lotteryBlock &gt; 5); lotteryBlock = block.number; for (uint i = 0; i &lt; players.length; i++) { if (playerNumber[players[i]] == number) { desires[players[i]].active = true; desires[players[i]].]]></description></item><item><title>#DASP# Bad Randomness (6)</title><link>http://houugen.fun/posts/dasp-bad-randomness-6.html</link><pubDate>Thu, 09 Aug 2018 15:17:12 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/dasp-bad-randomness-6.html</guid><description>0x00 Info 绝对的随机在Ethereum中很难实现，因为所有参数都可以在透明的链上查询，因此想要利用随机特性生成逻辑很容易出现bug，本篇就介绍DASP中第六类漏洞&amp;ndash;不安全的随机性。
0x01 错误实践 Solidity本身提供一些获取“随机值”的方法和变量，你可以在官方文档中查看。但是这些“随机值”（在链上公开）如果不当的作为生成随机数的因子或种子，那随机数就可以被预测。
根据DASP提供的实例我们看看有哪些坑。
第一种
uint256 private seed; function play() public payable { require(msg.value &amp;gt;= 1 ether); iteration++; uint randomNumber = uint(keccak256(seed + iteration)); if (randomNumber % 2 == 0) { msg.sender.transfer(this.balance); } } 利用私有变量seed和iteration通过keccak256 hash计算得到随机数，虽然seed属性为private，但是它也要在某个时间点设置，可以通过链上相关tx来获取其值，因此随机性可预测。
第二种
function play() public payable { require(msg.value &amp;gt;= 1 ether); if (block.blockhash(blockNumber) % 2 == 0) { msg.sender.transfer(this.balance); } } 这里使用block.blockhash(blockNumber)来计算随机数，这里必须强调的是，在solidity中，block.blockhash(uint blockNumber) returns (bytes32)只计算就近的256个块hash，如果blockNumber为当前块（block.number）或者超过256更久远的块，计算结果都是0.
Quote block.blockhash(uint blockNumber) returns (bytes32): hash of the given block - only works for 256 most recent blocks excluding current</description></item><item><title>#DASP# Denial of Services (5)</title><link>http://houugen.fun/posts/dasp-denial-of-services-5.html</link><pubDate>Thu, 09 Aug 2018 10:22:50 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/dasp-denial-of-services-5.html</guid><description>0x00 Info 在智能合约中，当 超过gas限制，异常抛出，非预期的终止合约，访问控制被破坏 均会产生合约拒绝服务问题。 本篇就介绍DASP第五大漏洞&amp;ndash;Denial of Service
0x01 Real World Impact GovernMental 起因：GovernMental&amp;rsquo;s 1100 ETH jackpot payout is stuck because it uses too much gas
官网：GovernMental
源码：etherscan code
GovernMental本身是个嘲讽政府庞氏骗局的游戏合约，其规则大概为投资者捐最少1ETH给政府，如果政府在最近12小时内没有收到任何捐赠，则将奖金发给最后一名投资人，而如果收到奖励，则按一定比例分别将钱分给资金池、政府及投资人。
其中在大于12小时未收到赞助的逻辑分支中，将奖金分给最后一名投资人后会重置所有投资人：
if (lastTimeOfNewCredit + TWELVE_HOURS &amp;lt; block.timestamp) { // Return money to sender msg.sender.send(amount); // Sends all contract money to the last creditor creditorAddresses[creditorAddresses.length - 1].send(profitFromCrash); corruptElite.send(this.balance); // Reset contract state lastCreditorPayedOut = 0; lastTimeOfNewCredit = block.timestamp; profitFromCrash = 0; creditorAddresses = new address[](0); // out of gas!</description></item><item><title>#DASP# Unchecked Return Valuse (4)</title><link>http://houugen.fun/posts/dasp-unchecked-return-valuse-4.html</link><pubDate>Fri, 03 Aug 2018 10:38:03 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/dasp-unchecked-return-valuse-4.html</guid><description>0x00 Info Unchecked Return Values For Low Level Calls漏洞简单理解就是没有检查一些不安全调用函数的返回值导致。
0x01 CALL -&amp;gt; Contract 在reentrancy漏洞介绍中提到几种账户间转币函数，这里我们回顾并深入了解下：
函数 特性 address.transfer() 1. 失败抛出异常且回滚 2. 提供2300gas，防止reentrancy address.send() 1. 失败返回false 2. 提供2300gass，防止reentrancy address.call.value().gas()() 1. 失败返回false 2. 发送所有可用gas 在这些交易函数中需要注意的是：
addr.transfer()和addr.send()能够防止重入漏洞。但是这些方法会触发fallback函数执行，被调合约仅被提供2300gas做一些日志事件。 x.transfer(y)等同于require(x.send(y))，transfer在发送失败时会自动revert（内置失败处理）。 addr.call.value(y)()也会触发代码执行，但是会用所有提供的gas执行代码，当然这种方式不能防止reentrancy漏洞。 通过了解以上我们会提出一些疑问：
2300gas由谁来提供？为何是2300gas? 2300gas能做什么？ 哪些行为会导致发送失败？ 要回答这些问题，首先要知道一个知识点，transfer、send、call在EVM虚拟机执行时会将这些solidity编译成 CALL 指令，而在以太坊wiki中定义了CALL的gas消耗：
Quote CALL has a multi-part gas cost: 700 base 9000 additional if the value is nonzero 25000 additional if the destination account does not yet exist (note: there is a difference between zero-balance and nonexistent!</description></item><item><title>#DASP# Arithmetic Issues (3)</title><link>http://houugen.fun/posts/dasp-arithmetic-issues-3.html</link><pubDate>Wed, 25 Jul 2018 09:20:55 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/dasp-arithmetic-issues-3.html</guid><description><![CDATA[0x00 Info Arithmetic Issues为DASP TOP10的第三类漏洞。这类算数漏洞比较常见
 also known as integer overflow and integer underflow
 0x01 原理 整型溢出的原理很简单，以8位整型为例，借图说明上溢。
8位无符号整型范围[0, 255]:
8位有符号整型范围[-128, 127]:
对于下溢 (unit8)0-1=(uint8)255, (int8)(-128)-1=(int8)127.
0x02 场景 对于智能合约常见的整型溢出漏洞，会出现在如下场景：
 经典场景，没有检查下溢  function withdraw(uint _amount) { require(balances[msg.sender] - _amount &gt; 0); // 如果 _amount &gt; msg.sender, underflow 	msg.sender.transfer(_amount); // 会transfer一个很大的值 	balances[msg.sender] -= _amount; } off-by-one  function popArrayOfThings() { require(arrayOfThings.length &gt;= 0); arrayOfThings.length--; // length是uint，当length=0，length--会下溢翻转；同样++也需要注意 } 关键字var var会根据分配值更改为最小适配类型，下例中i=0，因此i被分配为uint8。因此i最大255，当somethingLarge&gt;256时，i就会上溢。  for (var i = 0; i &lt; somethingLarge; i ++) { // .]]></description></item><item><title>#DASP# Access Control (2)</title><link>http://houugen.fun/posts/dasp-access-control-2.html</link><pubDate>Tue, 24 Jul 2018 11:43:13 +0000</pubDate><author>Author</author><guid>http://houugen.fun/posts/dasp-access-control-2.html</guid><description>0x00 Info 本篇为DASP TOP10的第二类漏洞Access Control。通过Parity及Rubixi合约分析理解此类型漏洞，改写OpenZeppelin中题目辅助理解。
0x01 Access Control 概念：攻击者通过合约不安全的可见性设置时可以直接访问合约的私有变量和函数，这其中需要可能需要绕过一些访问控制。
在使用 Solidity 编写合约代码时，有几种默认的变量或函数访问域关键字：private, public, external 和 internal，对合约实例方法来讲，默认可见状态为 public，而合约实例变量的默认可见状态为 private。 具体讲解参见solidity develop visibility 这里需要重点关注下external和internal，external函数为合约接口，只能被其他合约调用（在自身需通过this.f()调用）。而internal函数只能被自身调用。
此类漏洞经常会发生在以下场景：
合约使用已经遗弃的tx.origin验证调用者 通过很长的require处理大量的认证逻辑 通过delegatecall调用代理库或者代理合约 通俗讲就是一般的智能合约会通过初始化指定合约的拥有者，来实现类似赋予特权后收回合约资金的功能。而初始化函数如果能被任何人调用的话，攻击者就会将自己成为合约拥有者进行提币或恶意操作。
这里最著名的漏洞就是Parity Wallet Hack。但在介绍该漏洞前需要理解一些solidity知识。
0x02 tx.origin Solidity: Tx Origin Attacks
在solidity官方文档中已经声明禁止使用tx.origin做认证。
Quote If your wallet had checked msg.sender for authorization, it would get the address of the attack wallet, instead of the owner address. But by checking tx.origin, it gets the original address that kicked off the transaction, which is still the owner address.</description></item></channel></rss>